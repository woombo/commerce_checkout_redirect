<?php
// $Id$

/**
 * @file
 * Implement the checkout redirect feature.
 *
 * Anonymous users are redirected to a page where they can login or create a new account when they try to checkout.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_checkout_redirect_form_commerce_checkout_builder_form_alter(&$form, &$form_state, $form_id) {
  // Add checkout redirect setting on checkout configuration form.
  $elements['commerce_checkout_redirect'] = array(
    '#title' => 'Redirect',
    '#type' => 'item',
  );
  $elements['commerce_checkout_redirect']['commerce_checkout_redirect_anonymous'] = array(
    '#title' => 'Enable checkout redirect',
    '#description' => 'Force users to login before being able to checkout.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('commerce_checkout_redirect_anonymous', FALSE),
  );
  $elements['commerce_checkout_redirect']['commerce_checkout_redirect_url'] = array(
    '#title' => 'Destination',
    '#description' => 'Where the user will be redirected to when trying to checkout as anonymous.',
    '#type' => 'select',
    '#default_value' => variable_get('commerce_checkout_redirect_url', 'user/login'),
    '#options' => array('user/login' => 'Login', 'user/register' => 'Register'),
    '#states' => array(
      'invisible' => array(
        ':input[name="commerce_checkout_redirect_anonymous"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form = $elements + $form;
  $form['actions']['submit']['#submit'][] = 'commerce_checkout_redirect_settings_submit';
}

/**
 * Save the checkout redirect settings.
 */
function commerce_checkout_redirect_settings_submit($form, &$form_state) {
  variable_set('commerce_checkout_redirect_anonymous', $form_state['values']['commerce_checkout_redirect_anonymous']);
  variable_set('commerce_checkout_redirect_url', $form_state['values']['commerce_checkout_redirect_url']);
}

/**
 * Implements hook_commerce_checkout_router().
 */
function commerce_checkout_redirect_commerce_checkout_router($order, $checkout_page) {
  // Redirect anonymous users to the login/register form.
  if (variable_get('commerce_checkout_redirect_anonymous', FALSE) && user_is_anonymous()) {
    $_SESSION['commerce_checkout_redirect_anonymous'] = TRUE;
    $url = variable_get('commerce_checkout_redirect_url', 'user/login');
    drupal_set_message(t('You need to be logged in to be able to checkout.'));
    drupal_goto($url);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_checkout_redirect_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_commerce_checkout_redirect_user_register';
}

/**
 * Redirect users after registration.
 */
function _commerce_checkout_redirect_user_register($form, &$form_state) {
  if (variable_get('commerce_checkout_redirect_anonymous', FALSE)) {
    _commerce_checkout_redirect_redirect($form_state);
  }
}

/**
 * Implements hook_user_login().
 *
 * Redirect users after logging in.
 */
function commerce_checkout_redirect_user_login(&$edit, $account) {
  // Drupal do not allow user redirection after registration using this hook.
  // It happen in _commerce_checkout_redirect_user_register().
  if ($edit['build_info']['form_id'] != 'user_register_form' && variable_get('commerce_checkout_redirect_anonymous', FALSE)) {
    _commerce_checkout_redirect_redirect($edit);
  }
}

/**
 * Redirect to checkout.
 *
 * @param $form_state
 */
function _commerce_checkout_redirect_redirect(&$form_state) {
  if (!user_is_anonymous()) {
    global $user;
    $order_id = commerce_cart_order_id($user->uid);
    if ($_SESSION['commerce_checkout_redirect_anonymous'] && $order_id) {
      unset($_SESSION['commerce_checkout_redirect_anonymous']);
      $form_state['redirect'] = url('checkout');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function commerce_checkout_redirect_module_implements_alter(&$implementations, $hook) {
  // We need our hook_user_login to happen after order has been converted (commerce_cart_user_login).
  if (in_array($hook, array('user_login'))) {
    // Move our hook implementation to the bottom.
    $group = $implementations['commerce_checkout_redirect'];
    unset($implementations['commerce_checkout_redirect']);
    $implementations['commerce_checkout_redirect'] = $group;
  }
}